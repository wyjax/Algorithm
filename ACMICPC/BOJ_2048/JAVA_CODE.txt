import java.util.Scanner;

class Solution {
	int n, max = 0, ans = 0;
	int [][] map;
	boolean [][] visited;
	int dx[] = {1, 0, -1, 0};
	int dy[] = {0, 1, 0, -1};
	
	public Solution() {
		Scanner sc = new Scanner(System.in);
		n = sc.nextInt();
		map = new int[n][n];
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < n; j++) {
				map[i][j] = sc.nextInt();
				
				if(max < map[i][j])
					max = map[i][j];
			}
		}

		for(int k = 0; k <= max; k++) {
			visited = new boolean[n][n];
			int count = 0;
			
			for(int i = 0; i < n; i++) {
				for(int j = 0; j < n; j++) {
					if(!visited[i][j] && map[i][j] >= k) {
						count++;
						visited[i][j] = true;
						dfs(i, j, k);
					}
				}
			}
			ans = ans > count ? ans : count;
		}
		System.out.println(ans);
	}
	
	public void dfs(int x, int y, int k) {
		for(int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			
			if(nx < 0 || nx >= n || ny < 0 || ny >= n)
				continue;
			
			if(!visited[nx][ny] && map[nx][ny] >= k) {
				visited[nx][ny] = true;
				dfs(nx, ny, k);
			}
		}
	}
}

public class Main {
	public static void main(String args[]) {
		new Solution();
	}
}
